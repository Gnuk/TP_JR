import java.lang.Thread;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import java.awt.Rectangle;
import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Frame;

/**
* TP 1 de Parallelisme Fonctionnement d'une mine
* @author Anthony REY <anthony.rey@etu.univ-savoie.fr>
* @author Yohann Berthon <yohann.berthon@etu.univ-savoie.fr>
*/
public class Mine{
	/*
	* Cannaux
	*/
	private static op void niveau_H2O(int);
	private static op void niveau_CO(int);
	private static op void niveau_CH4(int);
	private static op void alerte_H2O_haut();
	private static op void alerte_H2O_bas();
	private static op void alerte_gaz_haut();
	private static op void alerte_gaz_bas();
	private static op void activ_ventil();
	private static op void activ_pompe();
	private static op void desactiv_ventil();
	private static op void desactiv_pompe();
	
	/*
	* Processus
	*/
	private op void environnement();
	private op void capteurH2O();
	private op void capteurCO();
	private op void capteurCH4();
	private op void ventilateur();
	private op void pompe();
	private op void d_H2O_haut();
	private op void d_H2O_bas();
	private op void d_gaz_bas();
	private op void d_H2O_bas_gaz();
	private op void commande();
	private op void commandeH20Haut();
	private op void commandeH20Bas();
	private op void commandVentil();
	private op void commandPompe();

	/*
	* Valeurs de l'environnement
	*/
	private static int H2Oval = 0;
	private static int COval = 0;
	private static int CH4val = 0;
	
	/*
	* Seuils
	*/
	private static final int niveau_H2O_haut = 80;
	private static final int niveau_H2O_bas = 20;
	private static final int seuil_CO = 70;
	private static final int seuil_CH4 = 70;

	/*
	* Etats
	*/
	private static boolean etatPompe = false;
	private static boolean etatVentilateur = false;
	
	/*
	* Ralentissement de l'environnement
	*/
	private static final int ralentissement = 75;
	
	/*
	* Interface graphique
	*/
	
	// Affichage
	private JPanel panel;
	private static final int windowL = 800;
	private static final int windowH = 600;

// Méthodes //

	/**
	* Calcule la nouvelle valeur (pourcentage) d'un capteur
	* @param val La valeur initiale
	* @param etat L'état (Correspond à l'état du ventilateur ou à l'état de la pompe par exemple)
	* @param add La valeur ajoutée
	* @param sub La valeur soustraite
	* @return La valeur calculée
	*/
	private static int changeVal(int val, boolean etat, int add, int sub){
		if(etat == true){
			val = val-sub;
		}
		val=val+add;
		if(val<0){
			val = 0;
		}
		else if(val > 100){
			val = 100;
			System.out.println("Saturation");
		}
		return val;
	}
	
	/**
	* Simule l'environnement de la mine
	*/
	private void environnement(){
		try{
			Thread.sleep(ralentissement);
			H2Oval = changeVal(H2Oval, etatPompe, 5, 7);
			COval = changeVal(COval, etatVentilateur, 2, 4);
			CH4val = changeVal(CH4val, etatVentilateur, 1, 2);
			panel.repaint();
			send environnement();
		}
		catch(InterruptedException e){
			System.out.println(e);
		}
	}

	
// Capteurs, ventilateur et pompe //

	/**
	* Capteur H20
	*/
	private void capteurH2O(){
		try{
			Thread.sleep(ralentissement/2);
			call niveau_H2O(H2Oval);
			// VUE;
			System.out.println("H2O : " + H2Oval + "%");
			//
			send capteurH2O();
		}
		catch(InterruptedException e){
			System.out.println(e);
		}
	}
	
	/**
	* Capteur CO
	*/
	private void capteurCO(){
		try{
			Thread.sleep(ralentissement/2);
			call niveau_CO(COval);
			// VUE
			System.out.println("CO : " + COval + "%");
			//
			send capteurCO();
		}
		catch(InterruptedException e){
			System.out.println(e);
		}
	}
	
	/**
	* Capteur CH4
	*/
	private void capteurCH4(){
		try{
			Thread.sleep(ralentissement/2);
			call niveau_CH4(CH4val);
			// VUE
			System.out.println("CH4 : " + CH4val + "%");
			//
			send capteurCH4();
		}
		catch(InterruptedException e){
			System.out.println(e);
		}
	}
	
	/**
	* Ventilateur
	*/
	private void ventilateur(){
		inni void activ_ventil(){
			System.out.println("Ventilateur Activé");
			etatVentilateur = true;
		}
		[] void desactiv_ventil(){
			System.out.println("Ventilateur Désactivé");
			etatVentilateur = false;
		}
		send ventilateur();
	}
	
	/**
	* Pompe
	*/
	private void pompe(){
		inni void activ_pompe(){
			System.out.println("Pompe Activée");
			etatPompe = true;
		}
		[] void desactiv_pompe(){
			System.out.println("Pompe Désactivée");
			etatPompe = false;
		}
		send pompe();
	}


// Détections, et commande //

	/**
	* Détection du niveau d'eau haut
	* d_H2O_haut(niveau_H2O, alerte_H2O_h + iaut, niveau_H2O_haut)
	*/
	private void d_H2O_haut(){
		inni void niveau_H2O(int v){
			if(v<niveau_H2O_haut){
				send d_H2O_haut();
			}
			else{
				call alerte_H2O_haut();
			}
		}
	}

	/**
	* Détection du niveau d'eau bas
	* d_H2O_bas(niveau_H2O, alerte_H2O_bas, niveau_H2O_bas)
	*/
	private void d_H2O_bas(){
		inni void niveau_H2O(int v){
			if(v>niveau_H2O_bas){
				send d_H2O_bas();
			}
			else{
				call alerte_H2O_bas();
			}
		}
	}

	/**
	* Détection du niveau de gaz bas
	* d_gaz_bas(niveau_CO, niveau_CH4, alerte_gaz_haut, alerte_gaz_bas, seuil_CO, seuil_CH4)
	*/
	private void d_gaz_bas(){
		inni void niveau_CO(int vCO){
			inni void niveau_CH4(int vCH4){
				if(vCO > seuil_CO || vCH4 > seuil_CH4){
					send d_gaz_bas();
				}
				else{
					call alerte_gaz_bas();
				}
			}
		}
	}
	
	/**
	* Détection du niveau d'eau et du gaz bas
	* d_H2O_bas_gaz(niveau_H2O, niveau_CO, niveau_CH4, alerte_H2O_bas, seuil_CO, seuil_CH4, activ_ventil)
	*/
	private void d_H2O_bas_gaz(){
		inni void niveau_H2O(int vH2O){
			if(vH2O < niveau_H2O_bas){
				call alerte_H2O_bas();
			}
			else{
				inni void niveau_CO(int vCO){
					inni void niveau_CH4(int vCH4){
						if(vCO > seuil_CO || vCH4 > seuil_CH4){
							call activ_ventil();
							send d_H2O_bas_gaz();
						}
						else{
							send d_H2O_bas_gaz();
						}
					}
				}
			}
		}
	}
	
	/**
	* Commande
	* commande(niveau_H2O, niveau_CO, niveau_CH4, alerte_H2O_haut, alerte_H2O_bas, alerte_gaz_haut, alerte_gaz_bas, niveau_H2O_haut, niveau_H2O_bas, seuil_CO, seuil_CH4, activ_pompe, desactiv_pompe, activ_ventil, desactiv_centil)
	*/
	private void commande(){
		send d_H2O_haut();
		send commandeH20Haut();
		send commandeH20Bas();
	}
	
	private void commandeH20Haut(){
		inni void alerte_H2O_haut(){
			inni void niveau_CO(int vCO){
				inni void niveau_CH4(int vCH4){
					if(vCO > seuil_CO || vCH4 > seuil_CH4){
						send commandVentil();
						send commandPompe();
					}
					else{
						call activ_pompe();
						send d_H2O_bas_gaz();
					}
				}
			}
		}
	}
	
	private void commandeH20Bas(){
		inni void alerte_H2O_bas(){
			call desactiv_pompe();
			call desactiv_ventil();
			send commande();
		}
	}
	
	private void commandVentil(){
		call activ_ventil();
		send d_gaz_bas();
	}
	
	private void commandPompe(){
		inni void alerte_gaz_bas(){
			call activ_pompe();
			send d_gaz_bas();
		}
	}

	private void createView(){
		JFrame fenetre = new JFrame();
		this.panel = new JPanel(){
			public void paint(Graphics g){
				int gaz;
				if(COval > CH4val){
					gaz = COval;
				}
				else{
					gaz = CH4val;
				}
				
				g.setColor(Color.white);
				g.fillRect(0,0,windowL,windowH);
				if(H2Oval == 100){
					g.setColor(Color.red);
				}
				else if(H2Oval>niveau_H2O_haut){
					g.setColor(Color.orange);
				}
				else if(H2Oval<niveau_H2O_bas){
					g.setColor(Color.blue);
				}
				else{
					g.setColor(Color.green);
				}
				g.fillRect(10,40,H2Oval,10);
				if(CH4val == 100){
					g.setColor(Color.red);
				}
				else if(CH4val>seuil_CH4){
					g.setColor(Color.orange);
				}
				else{
					g.setColor(Color.green);
				}
				g.fillRect(110,40,CH4val,10);
				if(COval == 100){
					g.setColor(Color.red);
				}
				else if(COval>seuil_CO){
					g.setColor(Color.orange);
				}
				else{
					g.setColor(Color.green);
				}
				g.fillRect(220,40,COval,10);
				g.setColor(Color.black);
				g.drawString("H2O : "+ H2Oval +"%", 10, 20);
				g.drawString("CH4 : "+ CH4val +"%", 110, 20);
				g.drawString("CO : "+ COval +"%", 220, 20);
				
				g.setColor(new Color(200, 180, 130));
				g.fillRect(0, 80, 800, 520);
				
				// Niveau d'eau + sol
				g.setColor(Color.black);
				g.fillRect(0, 390, 800, 210);
				
				g.setColor(Color.black);
				g.fillOval(600, 320, 20, 20);
				g.fillRect(608, 340, 4, 2);
				g.fillRect(598, 342, 24, 25);
				g.fillRect(592, 342, 5, 25);
				g.fillRect(623, 342, 5, 25);
				g.fillRect(600, 368, 6, 21);
				g.fillRect(614, 368, 6, 21);
				
				if(etatVentilateur){
					g.drawString("Ventilateur actif", 500, 20);
					g.setColor(new Color(50,50,50));
					g.fillOval(650, 100, 60, 60);
					g.fillRect(650, 165, 1, 20);
					g.fillRect(660, 170, 1, 20);
					g.fillRect(670, 165, 1, 20);
					g.fillRect(680, 170, 1, 20);
					g.fillRect(690, 165, 1, 20);
					g.fillRect(700, 170, 1, 20);
					g.fillRect(710, 165, 1, 20);
					g.setColor(Color.green);
					g.fillOval(665, 115, 30, 30);
				}
				else{
					g.drawString("Ventilateur inactif", 500, 20);
					g.setColor(Color.gray);
					g.fillOval(650, 100, 60, 60);
					g.setColor(Color.red);
					g.fillOval(665, 115, 30, 30);
				}
				
				
				g.setColor(new Color(180, 255, 200, 50));
				g.fillRect(0, 80, 800, gaz*3);
				
				g.setColor(Color.black);
				if(etatPompe){
					g.drawString("Pompe active", 500, 60);
					g.setColor(Color.lightGray);
					g.fillOval(50, 370, 40, 40);
					g.fillRect(60, 390, 20, 170);
					g.setColor(Color.green);
					g.fillOval(60, 380, 20, 20);
				}
				else{
					g.drawString("Pompe inactive", 500, 60);
					g.setColor(Color.gray);
					g.fillOval(50, 370, 40, 40);
					g.fillRect(60, 390, 20, 170);
					g.setColor(Color.red);
					g.fillOval(60, 380, 20, 20);
				}
				
				g.setColor(new Color(0,180,255,180));
				g.fillRect(0,400 + (200-(H2Oval*2)),800, (H2Oval*2));
				
			}
		};
		fenetre.setTitle("Similation du fonctionnement d'une Mine");
		fenetre.setSize(windowL, windowH);
		fenetre.setLocationRelativeTo(null);
		fenetre.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fenetre.setLayout(null);
		fenetre.setContentPane(panel);
		fenetre.setVisible(true);
	}
	
// Lancement principal //
	/**
	* Système
	*/
	private Mine(){
		this.createView();
		send environnement();
 		send commande();
 		// On estimera qu'au début de la simulation, les niveaux sont à 50%
		send capteurH2O();
		send capteurCO();
		send capteurCH4();
		send ventilateur();
		send pompe();
	}
	
	/**
	* Lancement du programme
	*/
	public static void main(String[] args){
		new Mine();
	}
}